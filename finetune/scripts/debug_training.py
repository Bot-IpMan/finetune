#!/usr/bin/env python3
"""
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –Ω–∞–≤—á–∞–Ω–Ω—è
"""

import os
import json
import sys

def check_file_contents(directory):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—ñ–≤ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
    print(f"üìÅ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {directory}")
    
    if not os.path.exists(directory):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {directory} –Ω–µ —ñ—Å–Ω—É—î")
        return
    
    files = os.listdir(directory)
    print(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(files)}")
    
    for file in files:
        file_path = os.path.join(directory, file)
        if os.path.isfile(file_path):
            size = os.path.getsize(file_path)
            print(f"  {file}: {size} –±–∞–π—Ç")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–º—ñ—Å—Ç JSON —Ñ–∞–π–ª—ñ–≤
            if file.endswith('.json'):
                try:
                    with open(file_path, 'r') as f:
                        content = f.read().strip()
                        if not content:
                            print(f"    ‚ö†Ô∏è –§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π!")
                        else:
                            print(f"    üìù –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤: {content[:100]}")
                            # –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON
                            try:
                                data = json.loads(content)
                                print(f"    ‚úÖ JSON –≤–∞–ª—ñ–¥–Ω–∏–π, –∫–ª—é—á—ñ–≤: {len(data)}")
                            except json.JSONDecodeError as e:
                                print(f"    ‚ùå JSON –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π: {e}")
                except Exception as e:
                    print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")

def check_training_logs():
    """–®—É–∫–∞—î —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—î –ª–æ–≥–∏ –Ω–∞–≤—á–∞–Ω–Ω—è"""
    print("\nüîç –®—É–∫–∞—é –ª–æ–≥–∏ –Ω–∞–≤—á–∞–Ω–Ω—è...")
    
    # –ú–æ–∂–ª–∏–≤—ñ –º—ñ—Å—Ü—è –ª–æ–≥—ñ–≤
    log_locations = [
        "./training.log",
        "./output/training.log",
        "./qwen_train_*/training.log",
    ]
    
    for pattern in log_locations:
        import glob
        matching_files = glob.glob(pattern)
        for log_file in matching_files:
            print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ –ª–æ–≥: {log_file}")
            try:
                with open(log_file, 'r') as f:
                    lines = f.readlines()
                    print(f"  –†—è–¥–∫—ñ–≤ —É –ª–æ–∑—ñ: {len(lines)}")
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤
                    print("  –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:")
                    for line in lines[-10:]:
                        print(f"    {line.strip()}")
                        
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—É: {e}")

def check_system_resources():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏—Å—Ç–µ–º–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏"""
    print("\nüíª –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å–∏—Å—Ç–µ–º–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏...")
    
    try:
        import psutil
        
        # –ü–∞–º'—è—Ç—å
        memory = psutil.virtual_memory()
        print(f"üß† –ü–∞–º'—è—Ç—å: {memory.available / (1024**3):.1f}GB –¥–æ—Å—Ç—É–ø–Ω–æ –∑ {memory.total / (1024**3):.1f}GB")
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage('.')
        print(f"üíæ –î–∏—Å–∫: {disk.free / (1024**3):.1f}GB –¥–æ—Å—Ç—É–ø–Ω–æ –∑ {disk.total / (1024**3):.1f}GB")
        
        if memory.available < 2 * 1024**3:  # –ú–µ–Ω—à–µ 2GB
            print("  ‚ö†Ô∏è –ú–∞–ª–æ –ø–∞–º'—è—Ç—ñ - –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–∏—á–∏–Ω–æ—é –ø—Ä–æ–±–ª–µ–º")
            
        if disk.free < 1024**3:  # –ú–µ–Ω—à–µ 1GB
            print("  ‚ö†Ô∏è –ú–∞–ª–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É")
            
    except ImportError:
        print("  ‚ÑπÔ∏è psutil –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏")
    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å—ñ–≤: {e}")

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
    print("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ...")
    
    required_packages = [
        'torch',
        'transformers', 
        'peft',
        'datasets',
        'scipy',
        'accelerate'
    ]
    
    for package in required_packages:
        try:
            module = __import__(package)
            if hasattr(module, '__version__'):
                version = module.__version__
            else:
                version = "–Ω–µ–≤—ñ–¥–æ–º–∞ –≤–µ—Ä—Å—ñ—è"
            print(f"  ‚úÖ {package}: {version}")
        except ImportError:
            print(f"  ‚ùå {package}: –ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û")
        except Exception as e:
            print(f"  ‚ö†Ô∏è {package}: –ø–æ–º–∏–ª–∫–∞ - {e}")

def suggest_fixes():
    """–ü—Ä–æ–ø–æ–Ω—É—î —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º"""
    print("\nüîß –ú–û–ñ–õ–ò–í–Ü –†–Ü–®–ï–ù–ù–Ø:")
    print("\n1. üìÑ –ü—É—Å—Ç—ñ —Ñ–∞–π–ª–∏ –º–æ–¥–µ–ª—ñ:")
    print("   - –ù–∞–≤—á–∞–Ω–Ω—è –±—É–ª–æ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∞–±–æ –∑–∞–≤–∏—Å–ª–æ")
    print("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø–æ–º–∏–ª–∫–∏")
    print("   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è –∑–Ω–æ–≤—É –∑ –º–µ–Ω—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
    print("\n2. üíæ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∏—Å–∫–æ–º:")
    print("   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó output/")
    print("   - –ú–æ–∂–ª–∏–≤–æ —Ñ–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ read-only")
    print("   - –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —ñ–Ω—à—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    
    print("\n3. üß† –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø–∞–º'—è—Ç—Ç—é:")
    print("   - –ó–º–µ–Ω—à—ñ—Ç—å batch_size –¥–æ 1")
    print("   - –ó–º–µ–Ω—à—ñ—Ç—å max_length –¥–æ 64")
    print("   - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –º–µ–Ω—à–∏–π LoRA rank (r=1)")
    
    print("\n4. üì¶ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏:")
    print("   - –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏")
    print("   - –û–Ω–æ–≤—ñ—Ç—å transformers: pip install --upgrade transformers")
    print("   - –°–ø—Ä–æ–±—É–π—Ç–µ: pip install scipy datasets peft accelerate")
    
    print("\n5. üèÉ‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞–≤—á–∞–Ω–Ω—è:")
    print("   - –í–∏–¥–∞–ª—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é output/: rm -rf output/")
    print("   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É –∑ debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é")
    print("   - –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è")

def main():
    if len(sys.argv) > 1:
        directory = sys.argv[1]
    else:
        directory = "./output"
    
    print("üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ù–ê–í–ß–ê–ù–ù–Ø")
    print("=" * 50)
    
    check_file_contents(directory)
    check_training_logs()
    check_system_resources()
    check_dependencies()
    suggest_fixes()
    
    print("\n" + "=" * 50)
    print("üéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
    print("1. –í–∏–¥–∞–ª—ñ—Ç—å –ø–æ—à–∫–æ–¥–∂–µ–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: rm -rf output/")
    print("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –Ω–∞–≤—á–∞–Ω–Ω—è")
    print("3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è –∑ –º–µ–Ω—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("4. –ú–æ–Ω—ñ—Ç–æ—Ä—Ç–µ –ø—Ä–æ—Ü–µ—Å –Ω–∞–≤—á–∞–Ω–Ω—è")

if __name__ == "__main__":
    main()