# prepare_data.py
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
"""

import os
import json
import random
from pathlib import Path
from typing import List, Dict, Any
import markdown
from bs4 import BeautifulSoup
import re

class DataProcessor:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö"""
    
    def __init__(self, data_dir: str = "/workspace/data", output_dir: str = "/workspace/data/processed"):
        self.data_dir = Path(data_dir)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def extract_text_from_markdown(self, file_path: Path) -> str:
        """–í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç –∑ markdown —Ñ–∞–π–ª—É"""
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ markdown –≤ HTML, –ø–æ—Ç—ñ–º –≤ —á–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
        html = markdown.markdown(content)
        soup = BeautifulSoup(html, 'html.parser')
        return soup.get_text()
    
    def generate_code_samples(self) -> List[Dict[str, str]]:
        """–ì–µ–Ω–µ—Ä—É—î –∑—Ä–∞–∑–∫–∏ –∫–æ–¥—É –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
        samples = []
        
        # –ë–∞–∑–æ–≤—ñ –∑—Ä–∞–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
        basic_samples = [
            {
                "instruction": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–≤–æ—Ö —á–∏—Å–µ–ª",
                "input": "Python",
                "output": """def add_numbers(a, b):
    \"\"\"–î–æ–¥–∞—î –¥–≤–∞ —á–∏—Å–ª–∞ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç\"\"\"
    return a + b

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
result = add_numbers(5, 3)
print(f"5 + 3 = {result}")"""
            },
            {
                "instruction": "–°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –º–Ω–æ–∂–µ–Ω–Ω—è –¥–≤–æ—Ö —á–∏—Å–µ–ª",
                "input": "Python",
                "output": """def multiply(a, b):
    \"\"\"–ú–Ω–æ–∂–∏—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞\"\"\"
    return a * b

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
result = multiply(4, 6)
print(f"4 * 6 = {result}")"""
            },
            {
                "instruction": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª—É",
                "input": "",
                "output": """def factorial(n):
    \"\"\"–û–±—á–∏—Å–ª—é—î —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª —á–∏—Å–ª–∞ n\"\"\"
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ —ñ—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è:
def factorial_iterative(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result"""
            },
            {
                "instruction": "–°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–º —Ä–∞—Ö—É–Ω–∫–æ–º",
                "input": "Python",
                "output": """class BankAccount:
    def __init__(self, account_number, initial_balance=0):
        self.account_number = account_number
        self.balance = initial_balance
        self.transaction_history = []
    
    def deposit(self, amount):
        \"\"\"–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É\"\"\"
        if amount > 0:
            self.balance += amount
            self.transaction_history.append(f"–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: +{amount}")
            return True
        return False
    
    def withdraw(self, amount):
        \"\"\"–ó–Ω—è—Ç—Ç—è –∫–æ—à—Ç—ñ–≤\"\"\"
        if amount > 0 and amount <= self.balance:
            self.balance -= amount
            self.transaction_history.append(f"–ó–Ω—è—Ç—Ç—è: -{amount}")
            return True
        return False
    
    def get_balance(self):
        return self.balance"""
            },
            {
                "instruction": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É",
                "input": "bubble sort",
                "output": """def bubble_sort(arr):
    \"\"\"–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –±—É–ª—å–±–∞—à–∫–æ—é\"\"\"
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
numbers = [64, 34, 25, 12, 22, 11, 90]
sorted_numbers = bubble_sort(numbers.copy())
print(f"–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫: {sorted_numbers}")"""
            },
            {
                "instruction": "–°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º—É",
                "input": "Python",
                "output": """def is_palindrome(text):
    \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º\"\"\"
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    cleaned = ''.join(text.split()).lower()
    return cleaned == cleaned[::-1]

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —Ä–µ–∫—É—Ä—Å—ñ—î—é:
def is_palindrome_recursive(s, start=0, end=None):
    if end is None:
        end = len(s) - 1
    
    if start >= end:
        return True
    
    if s[start] != s[end]:
        return False
    
    return is_palindrome_recursive(s, start + 1, end - 1)"""
            }
        ]
        
        samples.extend(basic_samples)
        
        # –ó—Ä–∞–∑–∫–∏ –¥–ª—è –≥—ñ–¥—Ä–æ–ø–æ–Ω—ñ–∫–∏ (–∑ –≤–∞—à–∏—Ö MD —Ñ–∞–π–ª—ñ–≤)
        hydroponic_samples = [
            {
                "instruction": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É pH —Ä—ñ–≤–Ω—è –¥–ª—è –≥—ñ–¥—Ä–æ–ø–æ–Ω–Ω–æ–≥–æ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è",
                "input": "Python",
                "output": """def calculate_ph_level(current_ph, target_ph=6.0):
    \"\"\"–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫–æ—Ä–µ–∫—Ü—ñ—é pH –¥–ª—è –≥—ñ–¥—Ä–æ–ø–æ–Ω—ñ–∫–∏\"\"\"
    if current_ph < target_ph:
        adjustment = "–î–æ–¥–∞—Ç–∏ pH UP (–ª—É–∂–Ω–∏–π —Ä–æ–∑—á–∏–Ω)"
        difference = target_ph - current_ph
    elif current_ph > target_ph:
        adjustment = "–î–æ–¥–∞—Ç–∏ pH DOWN (–∫–∏—Å–ª–æ—Ç–Ω–∏–π —Ä–æ–∑—á–∏–Ω)"
        difference = current_ph - target_ph
    else:
        adjustment = "pH –≤ –Ω–æ—Ä–º—ñ"
        difference = 0
    
    return {
        "current_ph": current_ph,
        "target_ph": target_ph,
        "difference": difference,
        "adjustment": adjustment
    }"""
            },
            {
                "instruction": "–°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≥—ñ–¥—Ä–æ–ø–æ–Ω–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏",
                "input": "Python",
                "output": """class HydroponicMonitor:
    def __init__(self, system_name):
        self.system_name = system_name
        self.ph_level = 6.0
        self.ec_level = 1.2  # Electrical conductivity
        self.water_temperature = 20.0
        self.nutrient_level = 100.0
    
    def update_readings(self, ph=None, ec=None, temp=None, nutrients=None):
        \"\"\"–û–Ω–æ–≤–ª—é—î –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏\"\"\"
        if ph is not None:
            self.ph_level = ph
        if ec is not None:
            self.ec_level = ec
        if temp is not None:
            self.water_temperature = temp
        if nutrients is not None:
            self.nutrient_level = nutrients
    
    def check_system_health(self):
        \"\"\"–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏\"\"\"
        issues = []
        
        if self.ph_level < 5.5 or self.ph_level > 6.5:
            issues.append(f"pH –ø–æ–∑–∞ –Ω–æ—Ä–º–æ—é: {self.ph_level}")
        
        if self.ec_level < 0.8 or self.ec_level > 2.0:
            issues.append(f"EC –ø–æ–∑–∞ –Ω–æ—Ä–º–æ—é: {self.ec_level}")
        
        if self.water_temperature < 18 or self.water_temperature > 24:
            issues.append(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–∑–∞ –Ω–æ—Ä–º–æ—é: {self.water_temperature}¬∞C")
        
        if self.nutrient_level < 20:
            issues.append(f"–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω: {self.nutrient_level}%")
        
        return issues if issues else ["–°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º—ñ"]"""
            }
        ]
        
        samples.extend(hydroponic_samples)
        return samples
    
    def create_datasets(self, train_ratio: float = 0.8):
        """–°—Ç–≤–æ—Ä—é—î —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç–∏"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑—Ä–∞–∑–∫—ñ–≤ –¥–∞–Ω–∏—Ö...")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑—Ä–∞–∑–∫–∏
        samples = self.generate_code_samples()
        
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –¥–∞–Ω—ñ
        random.shuffle(samples)
        
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω—ñ
        split_idx = int(len(samples) * train_ratio)
        train_samples = samples[:split_idx]
        eval_samples = samples[split_idx:]
        
        print(f"üìä –°—Ç–≤–æ—Ä–µ–Ω–æ {len(train_samples)} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –∑—Ä–∞–∑–∫—ñ–≤")
        print(f"üìä –°—Ç–≤–æ—Ä–µ–Ω–æ {len(eval_samples)} –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –∑—Ä–∞–∑–∫—ñ–≤")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        train_file = self.output_dir / "train_dataset.jsonl"
        with open(train_file, 'w', encoding='utf-8') as f:
            for sample in train_samples:
                f.write(json.dumps(sample, ensure_ascii=False) + '\n')
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        eval_file = self.output_dir / "eval_dataset.jsonl"
        with open(eval_file, 'w', encoding='utf-8') as f:
            for sample in eval_samples:
                f.write(json.dumps(sample, ensure_ascii=False) + '\n')
        
        print(f"üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {self.output_dir}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        stats = {
            "total_samples": len(samples),
            "train_samples": len(train_samples),
            "eval_samples": len(eval_samples),
            "train_ratio": train_ratio,
            "categories": self.get_sample_categories(samples)
        }
        
        with open(self.output_dir / "dataset_stats.json", 'w', encoding='utf-8') as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
        
        return train_file, eval_file, stats
    
    def get_sample_categories(self, samples: List[Dict]) -> Dict[str, int]:
        """–ê–Ω–∞–ª—ñ–∑—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑—Ä–∞–∑–∫—ñ–≤"""
        categories = {}
        for sample in samples:
            instruction = sample['instruction'].lower()
            
            if '—Ñ—É–Ω–∫—Ü—ñ—è' in instruction or 'function' in instruction:
                categories['functions'] = categories.get('functions', 0) + 1
            elif '–∫–ª–∞—Å' in instruction or 'class' in instruction:
                categories['classes'] = categories.get('classes', 0) + 1
            elif '–≥—ñ–¥—Ä–æ–ø–æ–Ω' in instruction or 'hydroponic' in instruction:
                categories['hydroponic'] = categories.get('hydroponic', 0) + 1
            else:
                categories['other'] = categories.get('other', 0) + 1
        
        return categories
    
    def validate_datasets(self):
        """–í–∞–ª—ñ–¥—É—î —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–∞—Ç–∞—Å–µ—Ç–∏"""
        print("‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∞—Å–µ—Ç—ñ–≤...")
        
        train_file = self.output_dir / "train_dataset.jsonl"
        eval_file = self.output_dir / "eval_dataset.jsonl"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        with open(train_file, 'r', encoding='utf-8') as f:
            train_lines = f.readlines()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ
        with open(eval_file, 'r', encoding='utf-8') as f:
            eval_lines = f.readlines()
        
        print(f"üìù –¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª: {len(train_lines)} —Ä—è–¥–∫—ñ–≤")
        print(f"üìù –í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª: {len(eval_lines)} —Ä—è–¥–∫—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—à–æ–≥–æ –∑—Ä–∞–∑–∫–∞
        try:
            sample = json.loads(train_lines[0])
            required_keys = ['instruction', 'input', 'output']
            
            for key in required_keys:
                if key not in sample:
                    raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á: {key}")
            
            print("‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –≤–∞–ª—ñ–¥–Ω–∏–π")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥
            print("\nüìÑ –ü—Ä–∏–∫–ª–∞–¥ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ–≥–æ –∑—Ä–∞–∑–∫–∞:")
            print(f"Instruction: {sample['instruction']}")
            print(f"Input: {sample['input']}")
            print(f"Output: {sample['output']}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö: {e}")
            return False

        return True
