{"instruction": "Напиши функцію для обчислення факторіалу", "input": "", "output": "def factorial(n):\n    \"\"\"Обчислює факторіал числа n\"\"\"\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\n# Альтернативна ітеративна версія:\ndef factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}
{"instruction": "Створи клас для роботи з банківським рахунком", "input": "Python", "output": "class BankAccount:\n    def __init__(self, account_number, initial_balance=0):\n        self.account_number = account_number\n        self.balance = initial_balance\n        self.transaction_history = []\n    \n    def deposit(self, amount):\n        \"\"\"Поповнення рахунку\"\"\"\n        if amount > 0:\n            self.balance += amount\n            self.transaction_history.append(f\"Поповнення: +{amount}\")\n            return True\n        return False\n    \n    def withdraw(self, amount):\n        \"\"\"Зняття коштів\"\"\"\n        if amount > 0 and amount <= self.balance:\n            self.balance -= amount\n            self.transaction_history.append(f\"Зняття: -{amount}\")\n            return True\n        return False\n    \n    def get_balance(self):\n        return self.balance"}
{"instruction": "Створи функцію для перевірки паліндрому", "input": "Python", "output": "def is_palindrome(text):\n    \"\"\"Перевіряє чи є рядок паліндромом\"\"\"\n    # Видаляємо пробіли та приводимо до нижнього регістру\n    cleaned = ''.join(text.split()).lower()\n    return cleaned == cleaned[::-1]\n\n# Альтернативна версія з рекурсією:\ndef is_palindrome_recursive(s, start=0, end=None):\n    if end is None:\n        end = len(s) - 1\n    \n    if start >= end:\n        return True\n    \n    if s[start] != s[end]:\n        return False\n    \n    return is_palindrome_recursive(s, start + 1, end - 1)"}
{"instruction": "Створи функцію для множення двох чисел", "input": "Python", "output": "def multiply(a, b):\n    \"\"\"Множить два числа\"\"\"\n    return a * b\n\n# Приклад використання:\nresult = multiply(4, 6)\nprint(f\"4 * 6 = {result}\")"}
{"instruction": "Напиши функцію для додавання двох чисел", "input": "Python", "output": "def add_numbers(a, b):\n    \"\"\"Додає два числа та повертає результат\"\"\"\n    return a + b\n\n# Приклад використання:\nresult = add_numbers(5, 3)\nprint(f\"5 + 3 = {result}\")"}
{"instruction": "Створи клас для моніторингу гідропонної системи", "input": "Python", "output": "class HydroponicMonitor:\n    def __init__(self, system_name):\n        self.system_name = system_name\n        self.ph_level = 6.0\n        self.ec_level = 1.2  # Electrical conductivity\n        self.water_temperature = 20.0\n        self.nutrient_level = 100.0\n    \n    def update_readings(self, ph=None, ec=None, temp=None, nutrients=None):\n        \"\"\"Оновлює показники системи\"\"\"\n        if ph is not None:\n            self.ph_level = ph\n        if ec is not None:\n            self.ec_level = ec\n        if temp is not None:\n            self.water_temperature = temp\n        if nutrients is not None:\n            self.nutrient_level = nutrients\n    \n    def check_system_health(self):\n        \"\"\"Перевіряє стан системи\"\"\"\n        issues = []\n        \n        if self.ph_level < 5.5 or self.ph_level > 6.5:\n            issues.append(f\"pH поза нормою: {self.ph_level}\")\n        \n        if self.ec_level < 0.8 or self.ec_level > 2.0:\n            issues.append(f\"EC поза нормою: {self.ec_level}\")\n        \n        if self.water_temperature < 18 or self.water_temperature > 24:\n            issues.append(f\"Температура поза нормою: {self.water_temperature}°C\")\n        \n        if self.nutrient_level < 20:\n            issues.append(f\"Низький рівень поживних речовин: {self.nutrient_level}%\")\n        \n        return issues if issues else [\"Система в нормі\"]"}
