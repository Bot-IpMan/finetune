#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ MD —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ –≥—ñ–¥—Ä–æ–ø–æ–Ω–Ω–µ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è –≥–æ—Ä–æ—Ö—É
"""

import json
import random
from pathlib import Path
from typing import List, Dict
import markdown
from bs4 import BeautifulSoup


class HydroponicDataProcessor:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥—ñ–¥—Ä–æ–ø–æ–Ω–Ω–µ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è –≥–æ—Ä–æ—Ö—É"""

    def __init__(self, data_dir: str = "/workspace/data", output_dir: str = "/workspace/data/processed"):
        self.data_dir = Path(data_dir)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)

        self.md_files = [
            'Growing Peas Hydroponically A Comprehensive Guide.md',
            'Growing Peas Without Soil_.md',
            'Growing_Green_Peas.md',
            'HYDROPONIC GREEN PEA PRODUCTION MASTER GUIDE.md',
            'Hydroponic Green Pea Cultivation Guide.md',
            'green_peas_growing_guide.md'
        ]

    def extract_text_from_markdown(self, file_path: Path) -> str:
        """–í–∏—Ç—è–≥—É—î —á–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –∑ markdown —Ñ–∞–π–ª—É"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            html = markdown.markdown(content)
            soup = BeautifulSoup(html, 'html.parser')
            return soup.get_text()
        except Exception as exc:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {file_path}: {exc}")
            return ""

    def extract_sections(self, text: str) -> Dict[str, List[str]]:
        """–†–æ–∑–±–∏–≤–∞—î —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Å–µ–∫—Ü—ñ—ó"""
        sections = {
            'equipment': [],
            'nutrients': [],
            'growing_process': [],
            'troubleshooting': [],
            'harvesting': [],
            'general': []
        }

        equipment_keywords = ['equipment', 'system', 'pump', 'reservoir', 'light', 'container', 'hydroponic system']
        nutrient_keywords = ['nutrient', 'ph', 'ec', 'fertilizer', 'solution', 'concentration', 'ppm']
        process_keywords = ['germination', 'seedling', 'transplant', 'growth stage', 'flowering', 'pollination']
        troubleshooting_keywords = ['problem', 'disease', 'pest', 'deficiency', 'yellowing', 'wilting']
        harvesting_keywords = ['harvest', 'picking', 'mature', 'ready', 'yield']

        paragraphs = [p.strip() for p in text.split('\n\n') if p.strip()]
        for para in paragraphs:
            lower = para.lower()
            if any(k in lower for k in equipment_keywords):
                sections['equipment'].append(para)
            elif any(k in lower for k in nutrient_keywords):
                sections['nutrients'].append(para)
            elif any(k in lower for k in process_keywords):
                sections['growing_process'].append(para)
            elif any(k in lower for k in troubleshooting_keywords):
                sections['troubleshooting'].append(para)
            elif any(k in lower for k in harvesting_keywords):
                sections['harvesting'].append(para)
            else:
                sections['general'].append(para)
        return sections

    def generate_training_samples(self) -> List[Dict[str, str]]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –∑—Ä–∞–∑–∫—ñ–≤"""
        print("üîÑ –û–±—Ä–æ–±–∫–∞ MD —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑—Ä–∞–∑–∫—ñ–≤...")
        samples: List[Dict[str, str]] = []
        all_content = []
        for md_file in self.md_files:
            path = self.data_dir / md_file
            if path.exists():
                print(f"üìñ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: {md_file}")
                text = self.extract_text_from_markdown(path)
                if text:
                    all_content.append((md_file, text))
                    print(f"   ‚úÖ –í–∏—Ç—è–≥–Ω—É—Ç–æ {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {md_file}")

        for filename, content in all_content:
            sections = self.extract_sections(content)
            file_samples = self.create_samples_from_sections(sections, filename)
            samples.extend(file_samples)
            print(f"   üìù –°—Ç–≤–æ—Ä–µ–Ω–æ {len(file_samples)} –∑—Ä–∞–∑–∫—ñ–≤ –∑ {filename}")

        samples.extend(self.generate_base_code_samples())
        print(f"üìä –ó–∞–≥–∞–ª–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–æ {len(samples)} —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –∑—Ä–∞–∑–∫—ñ–≤")
        return samples

    def create_samples_from_sections(self, sections: Dict[str, List[str]], filename: str) -> List[Dict[str, str]]:
        """–°—Ç–≤–æ—Ä—é—î –∑—Ä–∞–∑–∫–∏ –∑ —Å–µ–∫—Ü—ñ–π —Ç–µ–∫—Å—Ç—É"""
        samples: List[Dict[str, str]] = []
        for equipment_text in sections['equipment'][:3]:
            samples.append({
                "instruction": "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≥—ñ–¥—Ä–æ–ø–æ–Ω–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è –≥–æ—Ä–æ—Ö—É",
                "input": "Python",
                "output": self.generate_equipment_monitoring_code(equipment_text)
            })
        for nutrient_text in sections['nutrients'][:3]:
            samples.append({
                "instruction": "–°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ–∂–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—á–∏–Ω—É –¥–ª—è –≥–æ—Ä–æ—Ö—É",
                "input": "Python",
                "output": self.generate_nutrient_calculation_code(nutrient_text)
            })
        for process_text in sections['growing_process'][:3]:
            samples.append({
                "instruction": "–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–¥—ñ–π —Ä–æ—Å—Ç—É –≥–æ—Ä–æ—Ö—É –≤ –≥—ñ–¥—Ä–æ–ø–æ–Ω—ñ—Ü—ñ",
                "input": "Python",
                "output": self.generate_growth_tracking_code(process_text)
            })
        for trouble_text in sections['troubleshooting'][:2]:
            samples.append({
                "instruction": "–°—Ç–≤–æ—Ä–∏ —Å–∏—Å—Ç–µ–º—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—ñ –≥–æ—Ä–æ—Ö—É",
                "input": "Python",
                "output": self.generate_troubleshooting_code(trouble_text)
            })
        for harvest_text in sections['harvesting'][:2]:
            samples.append({
                "instruction": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –∑–±–æ—Ä—É –≤—Ä–æ–∂–∞—é –≥–æ—Ä–æ—Ö—É",
                "input": "Python",
                "output": self.generate_harvest_timing_code(harvest_text)
            })
        return samples

    def generate_equipment_monitoring_code(self, context_text: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–¥ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"""
        return '''class HydroponicEquipmentMonitor:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≥—ñ–¥—Ä–æ–ø–æ–Ω–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è –≥–æ—Ä–æ—Ö—É"""

    def __init__(self):
        self.water_pump_status = True
        self.air_pump_status = True
        self.ph_sensor_value = 6.0
        self.ec_sensor_value = 1.2
        self.water_level = 80.0  # —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        self.temperature = 20.0  # ¬∞C

    def check_water_pump(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –≤–æ–¥—è–Ω–æ–≥–æ –Ω–∞—Å–æ—Å—É"""
        if not self.water_pump_status:
            return {"status": "ERROR", "message": "–í–æ–¥—è–Ω–∏–π –Ω–∞—Å–æ—Å –Ω–µ –ø—Ä–∞—Ü—é—î"}
        return {"status": "OK", "message": "–í–æ–¥—è–Ω–∏–π –Ω–∞—Å–æ—Å –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ"}

    def check_nutrient_levels(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä—ñ–≤–µ–Ω—å –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω"""
        if self.ec_level < 0.8:
            return {"status": "WARNING", "message": "–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω"}
        elif self.ec_level > 2.0:
            return {"status": "WARNING", "message": "–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω"}
        return {"status": "OK", "message": "–†—ñ–≤–µ–Ω—å –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω –≤ –Ω–æ—Ä–º—ñ"}

    def monitor_ph(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Ä—ñ–≤–µ–Ω—å pH"""
        optimal_ph = 6.0
        if abs(self.ph_sensor_value - optimal_ph) > 0.5:
            return {"status": "WARNING", "message": f"pH {self.ph_sensor_value} –ø–æ—Ç—Ä–µ–±—É—î –∫–æ—Ä–µ–∫—Ü—ñ—ó"}
        return {"status": "OK", "message": "pH –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ"}

    def get_system_status(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏"""
        checks = [
            self.check_water_pump(),
            self.check_nutrient_levels(),
            self.monitor_ph()
        ]
        errors = [c for c in checks if c['status'] == 'ERROR']
        warnings = [c for c in checks if c['status'] == 'WARNING']
        if errors:
            return {"overall_status": "CRITICAL", "issues": errors}
        elif warnings:
            return {"overall_status": "WARNING", "issues": warnings}
        else:
            return {"overall_status": "OK", "message": "–í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ"}'''

    def generate_nutrient_calculation_code(self, context_text: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–¥ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω"""
        return '''class PeaNutrientCalculator:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∂–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—á–∏–Ω—É –¥–ª—è –≥–æ—Ä–æ—Ö—É"""

    def __init__(self):
        self.optimal_nutrients = {
            'nitrogen': 150,
            'phosphorus': 50,
            'potassium': 200,
            'calcium': 180,
            'magnesium': 50,
            'sulfur': 70
        }
        self.optimal_ph = 6.0
        self.optimal_ec = 1.2

    def calculate_nutrient_solution(self, water_volume_liters: float, growth_stage: str):
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—é –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω"""
        stage_multipliers = {
            'seedling': 0.5,
            'vegetative': 1.0,
            'flowering': 1.2,
            'pod_filling': 1.3
        }
        multiplier = stage_multipliers.get(growth_stage, 1.0)
        solution = {}
        for nutrient, base_ppm in self.optimal_nutrients.items():
            adjusted_ppm = base_ppm * multiplier
            mg_per_liter = adjusted_ppm
            total_mg = mg_per_liter * water_volume_liters
            solution[nutrient] = {
                'ppm': adjusted_ppm,
                'mg_per_liter': mg_per_liter,
                'total_mg': total_mg
            }
        return solution

    def adjust_ph(self, current_ph: float, target_ph: float = None):
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫–æ—Ä–µ–∫—Ü—ñ—é pH"""
        if target_ph is None:
            target_ph = self.optimal_ph
        ph_difference = current_ph - target_ph
        if ph_difference > 0.1:
            return {
                'action': 'add_ph_down',
                'amount': f'{abs(ph_difference) * 2:.1f} ml –Ω–∞ 10L –≤–æ–¥–∏',
                'reason': 'pH –∑–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–∏–π'
            }
        elif ph_difference < -0.1:
            return {
                'action': 'add_ph_up',
                'amount': f'{abs(ph_difference) * 1.5:.1f} ml –Ω–∞ 10L –≤–æ–¥–∏',
                'reason': 'pH –∑–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∏–π'
            }
        else:
            return {'action': 'no_adjustment', 'reason': 'pH –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ'}

    def monitor_ec_levels(self, current_ec: float):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Ä—ñ–≤–µ–Ω—å –µ–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
        if current_ec < self.optimal_ec - 0.2:
            return {'status': 'low', 'recommendation': '–î–æ–¥–∞—Ç–∏ –ø–æ–∂–∏–≤–Ω—ñ —Ä–µ—á–æ–≤–∏–Ω–∏'}
        elif current_ec > self.optimal_ec + 0.3:
            return {'status': 'high', 'recommendation': '–†–æ–∑–±–∞–≤–∏—Ç–∏ –≤–æ–¥–æ—é'}
        else:
            return {'status': 'optimal', 'recommendation': '–†—ñ–≤–µ–Ω—å –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π'}'''

    def generate_growth_tracking_code(self, context_text: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–¥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ—Å—Ç—É"""
        return '''class PeaGrowthTracker:
    """–°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ—Å—Ç—É –≥–æ—Ä–æ—Ö—É –≤ –≥—ñ–¥—Ä–æ–ø–æ–Ω—ñ—Ü—ñ"""

    def __init__(self, variety: str = "sugar_snap"):
        self.variety = variety
        self.germination_date = None
        self.transplant_date = None
        self.current_stage = "seed"
        self.days_since_germination = 0
        self.growth_stages = {
            'seed': {'duration': 0, 'description': '–ù–∞—Å—ñ–Ω–Ω—è'},
            'germination': {'duration': 7, 'description': '–ü—Ä–æ—Ä–æ—Å—Ç–∞–Ω–Ω—è'},
            'seedling': {'duration': 14, 'description': '–°—ñ—è–Ω–µ—Ü—å'},
            'vegetative': {'duration': 30, 'description': '–í–µ–≥–µ—Ç–∞—Ç–∏–≤–Ω–∏–π —Ä—ñ—Å—Ç'},
            'flowering': {'duration': 21, 'description': '–¶–≤—ñ—Ç—ñ–Ω–Ω—è'},
            'pod_development': {'duration': 14, 'description': '–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É—á–∫—ñ–≤'},
            'harvest_ready': {'duration': 7, 'description': '–ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–±–æ—Ä—É'}
        }

    def start_germination(self):
        """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –ø—Ä–æ—Ä–æ—Å—Ç–∞–Ω–Ω—è"""
        from datetime import datetime
        self.germination_date = datetime.now()
        self.current_stage = "germination"
        return f"–ü—Ä–æ—Ä–æ—Å—Ç–∞–Ω–Ω—è –ø–æ—á–∞—Ç–æ {self.germination_date.strftime('%Y-%m-%d')}"

    def update_growth_stage(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞–¥—ñ—é —Ä–æ—Å—Ç—É"""
        if not self.germination_date:
            return "–ü—Ä–æ—Ä–æ—Å—Ç–∞–Ω–Ω—è —â–µ –Ω–µ –ø–æ—á–∞—Ç–æ"
        from datetime import datetime
        self.days_since_germination = (datetime.now() - self.germination_date).days
        cumulative_days = 0
        for stage, info in self.growth_stages.items():
            cumulative_days += info['duration']
            if self.days_since_germination <= cumulative_days:
                self.current_stage = stage
                break
        return f"–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞–¥—ñ—è: {self.growth_stages[self.current_stage]['description']}"

    def get_care_recommendations(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –¥–æ–≥–ª—è–¥—É"""
        recommendations = {
            'germination': [
                '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 18-20¬∞C',
                '–í–∏—Å–æ–∫–∞ –≤–æ–ª–æ–≥—ñ—Å—Ç—å',
                '–°–ª–∞–±–∫–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è'
            ],
            'seedling': [
                '–ó–±—ñ–ª—å—à–∏—Ç–∏ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –¥–æ 12-14 –≥–æ–¥–∏–Ω',
                'pH 6.0-6.2',
                'EC 0.8-1.0'
            ],
            'vegetative': [
                '–ü–æ–≤–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è 14-16 –≥–æ–¥–∏–Ω',
                'pH 6.0-6.5',
                'EC 1.2-1.4',
                "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –æ–ø–æ—Ä –¥–ª—è –≤'—é–Ω–∫–∏—Ö —Å–æ—Ä—Ç—ñ–≤"
            ],
            'flowering': [
                '–°—Ç–∞–±—ñ–ª—å–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è',
                '–£–Ω–∏–∫–∞—Ç–∏ —Å—Ç—Ä–µ—Å–æ–≤–∏—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤',
                '–ö–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –≤–æ–ª–æ–≥—ñ—Å—Ç—å –¥–ª—è –∑–∞–ø–∏–ª–µ–Ω–Ω—è'
            ],
            'pod_development': [
                '–ó–±—ñ–ª—å—à–∏—Ç–∏ –∫–∞–ª—ñ–π —É —Ä–æ–∑—á–∏–Ω—ñ',
                '–†–µ–≥—É–ª—è—Ä–Ω–∏–π –ø–æ–ª–∏–≤',
                '–ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–∞ —à–∫—ñ–¥–Ω–∏–∫—ñ–≤'
            ],
            'harvest_ready': [
                '–ó–±–∏—Ä–∞—Ç–∏ —â–æ–¥–Ω—è',
                '–†–∞–Ω–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è –∑–±–æ—Ä—É',
                '–ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Å—Ç—Ä—É—á–∫–∏ –Ω–∞ –∑—Ä—ñ–ª—ñ—Å—Ç—å'
            ]
        }
        return recommendations.get(self.current_stage, ['–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ–≥–ª—è–¥'])

    def predict_harvest_date(self):
        """–ü—Ä–æ–≥–Ω–æ–∑—É—î –¥–∞—Ç—É –∑–±–æ—Ä—É –≤—Ä–æ–∂–∞—é"""
        if not self.germination_date:
            return "–°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ä–æ—Å—Ç–∞–Ω–Ω—è"
        total_days = sum(stage['duration'] for stage in self.growth_stages.values())
        from datetime import timedelta
        harvest_date = self.germination_date + timedelta(days=total_days)
        return f"–û—á—ñ–∫—É–≤–∞–Ω–∞ –¥–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –∑–±–æ—Ä—É: {harvest_date.strftime('%Y-%m-%d')}"'''

    def generate_troubleshooting_code(self, context_text: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–¥ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º"""
        return '''class PeaTroubleshootingSystem:
    """–°–∏—Å—Ç–µ–º–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—ñ –≥–æ—Ä–æ—Ö—É"""

    def __init__(self):
        self.common_issues = {
            'yellowing_leaves': {
                'causes': ['nitrogen_deficiency', 'overwatering', 'root_rot'],
                'solutions': ['increase_nitrogen', 'reduce_watering', 'check_roots']
            },
            'stunted_growth': {
                'causes': ['nutrient_deficiency', 'ph_imbalance', 'insufficient_light'],
                'solutions': ['check_nutrient_levels', 'adjust_ph', 'increase_lighting']
            },
            'poor_flowering': {
                'causes': ['too_much_nitrogen', 'temperature_stress', 'insufficient_pollination'],
                'solutions': ['reduce_nitrogen', 'control_temperature', 'manual_pollination']
            }
        }

    def diagnose_leaf_problems(self, symptoms: list):
        """–î—ñ–∞–≥–Ω–æ—Å—Ç—É—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ª–∏—Å—Ç—è–º"""
        diagnosis = []
        if 'yellowing' in symptoms:
            if 'lower_leaves' in symptoms:
                diagnosis.append({
                    'problem': '–î–µ—Ñ—ñ—Ü–∏—Ç –∞–∑–æ—Ç—É',
                    'solution': '–ó–±—ñ–ª—å—à–∏—Ç–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—é –∞–∑–æ—Ç—É –≤ —Ä–æ–∑—á–∏–Ω—ñ',
                    'urgency': 'medium'
                })
            elif 'all_leaves' in symptoms:
                diagnosis.append({
                    'problem': '–ü–µ—Ä–µ–∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è –∞–±–æ –∫–æ—Ä—ñ–Ω—Ü–µ–≤–∞ –≥–Ω–∏–ª—å',
                    'solution': '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ—Ä–µ–Ω—ñ —Ç–∞ –∑–º–µ–Ω—à–∏—Ç–∏ –ø–æ–ª–∏–≤',
                    'urgency': 'high'
                })
        if 'brown_spots' in symptoms:
            diagnosis.append({
                'problem': '–ì—Ä–∏–±–∫–æ–≤–µ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è',
                'solution': '–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—é —Ç–∞ –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ—É–Ω–≥—ñ—Ü–∏–¥–æ–º',
                'urgency': 'high'
            })
        if 'curling' in symptoms:
            diagnosis.append({
                'problem': '–°—Ç—Ä–µ—Å –≤—ñ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –∞–±–æ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ',
                'solution': '–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–ª—ñ–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å',
                'urgency': 'medium'
            })
        return diagnosis

    def check_nutrient_deficiency(self, ph: float, ec: float, visual_symptoms: list):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–µ—Ñ—ñ—Ü–∏—Ç –ø–æ–∂–∏–≤–Ω–∏—Ö —Ä–µ—á–æ–≤–∏–Ω"""
        deficiencies = []
        if ph < 5.5:
            deficiencies.append({
                'nutrient': '–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å',
                'reason': 'pH –∑–∞–Ω–∞–¥—Ç–æ –∫–∏—Å–ª–∏–π',
                'solution': '–ü—ñ–¥–≤–∏—â–∏—Ç–∏ pH –¥–æ 6.0-6.5'
            })
        elif ph > 7.0:
            deficiencies.append({
                'nutrient': '–ó–∞–ª—ñ–∑–æ —Ç–∞ –º—ñ–∫—Ä–æ–µ–ª–µ–º–µ–Ω—Ç–∏',
                'reason': 'pH –∑–∞–Ω–∞–¥—Ç–æ –ª—É–∂–Ω–∏–π',
                'solution': '–ó–Ω–∏–∑–∏—Ç–∏ pH –¥–æ 6.0-6.5'
            })
        if ec < 0.8:
            deficiencies.append({
                'nutrient': '–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∂–∏–≤–Ω—ñ —Ä–µ—á–æ–≤–∏–Ω–∏',
                'reason': '–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Å–æ–ª–µ–π',
                'solution': '–ó–±—ñ–ª—å—à–∏—Ç–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—é –¥–æ–±—Ä–∏–≤'
            })
        if 'interveinal_chlorosis' in visual_symptoms:
            deficiencies.append({
                'nutrient': '–ó–∞–ª—ñ–∑–æ',
                'reason': '–•–ª–æ—Ä–æ–∑ –º—ñ–∂ –∂–∏–ª–∫–∞–º–∏ –ª–∏—Å—Ç—è',
                'solution': '–î–æ–¥–∞—Ç–∏ —Ö–µ–ª–∞—Ç–Ω–µ –∑–∞–ª—ñ–∑–æ'
            })
        if 'purple_stems' in visual_symptoms:
            deficiencies.append({
                'nutrient': '–§–æ—Å—Ñ–æ—Ä',
                'reason': '–§—ñ–æ–ª–µ—Ç–æ–≤–µ –∑–∞–±–∞—Ä–≤–ª–µ–Ω–Ω—è —Å—Ç–µ–±–µ–ª',
                'solution': '–ó–±—ñ–ª—å—à–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å —Ñ–æ—Å—Ñ–æ—Ä—É'
            })
        return deficiencies

    def emergency_protocol(self, issue_type: str):
        """–ü—Ä–æ—Ç–æ–∫–æ–ª –µ–∫—Å—Ç—Ä–µ–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏"""
        protocols = {
            'system_failure': [
                '1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∂–∏–≤–ª–µ–Ω–Ω—è',
                '2. –ó–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ —Ä—É—á–Ω–∏–π –ø–æ–ª–∏–≤',
                '3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—Å–æ—Å–∏',
                "4. –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"
            ],
            'nutrient_lockout': [
                '1. –ü—Ä–æ–º–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É —á–∏—Å—Ç–æ—é –≤–æ–¥–æ—é',
                '2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ pH',
                '3. –ü—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏ —Å–≤—ñ–∂–∏–π —Ä–æ–∑—á–∏–Ω',
                '4. –ü–æ—Å—Ç—É–ø–æ–≤–æ –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—é'
            ],
            'disease_outbreak': [
                '1. –Ü–∑–æ–ª—é–≤–∞—Ç–∏ —É—Ä–∞–∂–µ–Ω—ñ —Ä–æ—Å–ª–∏–Ω–∏',
                '2. –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—é',
                '3. –ó–º–µ–Ω—à–∏—Ç–∏ –≤–æ–ª–æ–≥—ñ—Å—Ç—å',
                '4. –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏'
            ]
        }
        return protocols.get(issue_type, ['–ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º'])'''

    def generate_harvest_timing_code(self, context_text: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–¥ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—É –∑–±–æ—Ä—É –≤—Ä–æ–∂–∞—é"""
        return '''class PeaHarvestOptimizer:
    """–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–±–æ—Ä—É –≤—Ä–æ–∂–∞—é –≥–æ—Ä–æ—Ö—É"""

    def __init__(self):
        self.variety_characteristics = {
            'sugar_snap': {
                'days_to_harvest': 60,
                'optimal_size': 'plump_pods',
                'harvest_window': 5
            },
            'snow_pea': {
                'days_to_harvest': 55,
                'optimal_size': 'flat_pods',
                'harvest_window': 3
            },
            'shelling_pea': {
                'days_to_harvest': 70,
                'optimal_size': 'full_pods',
                'harvest_window': 7
            }
        }

    def assess_pod_readiness(self, variety: str, visual_indicators: list):
        """–û—Ü—ñ–Ω—é—î –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å—Ç—Ä—É—á–∫—ñ–≤ –¥–æ –∑–±–æ—Ä—É"""
        characteristics = self.variety_characteristics.get(variety, {})
        readiness_score = 0
        feedback = []
        if variety == 'sugar_snap':
            if 'plump_pods' in visual_indicators:
                readiness_score += 40
                feedback.append("–°—Ç—Ä—É—á–∫–∏ –¥–æ–±—Ä–µ –Ω–∞–ø–æ–≤–Ω–µ–Ω—ñ")
            if 'bright_green' in visual_indicators:
                readiness_score += 30
                feedback.append("–Ø—Å–∫—Ä–∞–≤–æ-–∑–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä")
            if 'crisp_texture' in visual_indicators:
                readiness_score += 30
                feedback.append("–•—Ä—É—Å—Ç–∫—ñ —Å—Ç—Ä—É—á–∫–∏")
        elif variety == 'snow_pea':
            if 'flat_pods' in visual_indicators:
                readiness_score += 50
                feedback.append("–ü–ª–æ—Å–∫—ñ —Å—Ç—Ä—É—á–∫–∏ –±–µ–∑ –≥–æ—Ä–±–æ—á–∫—ñ–≤")
            if 'tender_pods' in visual_indicators:
                readiness_score += 50
                feedback.append("–ù—ñ–∂–Ω—ñ —Å—Ç—Ä—É—á–∫–∏")
        elif variety == 'shelling_pea':
            if 'full_pods' in visual_indicators:
                readiness_score += 40
                feedback.append("–ü–æ–≤–Ω—ñ—Å—Ç—é –Ω–∞–ø–æ–≤–Ω–µ–Ω—ñ —Å—Ç—Ä—É—á–∫–∏")
            if 'round_peas' in visual_indicators:
                readiness_score += 40
                feedback.append("–ö—Ä—É–≥–ª—ñ –≥–æ—Ä–æ—à–∏–Ω–∏ –≤–∏–¥–Ω–æ –∫—Ä—ñ–∑—å —Å—Ç—Ä—É—á–æ–∫")
            if 'glossy_pods' in visual_indicators:
                readiness_score += 20
                feedback.append("–ì–ª—è–Ω—Å–æ–≤—ñ —Å—Ç—Ä—É—á–∫–∏")
        if readiness_score >= 80:
            recommendation = "–ó–ë–ò–†–ê–¢–ò –ó–ê–†–ê–ó - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∑—Ä—ñ–ª—ñ—Å—Ç—å"
        elif readiness_score >= 60:
            recommendation = "–ì–æ—Ç–æ–≤—ñ –¥–æ –∑–±–æ—Ä—É –ø—Ä–æ—Ç—è–≥–æ–º 1-2 –¥–Ω—ñ–≤"
        elif readiness_score >= 40:
            recommendation = "–ü–æ—á–µ–∫–∞—Ç–∏ —â–µ 2-3 –¥–Ω—ñ"
        else:
            recommendation = "–ó–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ –¥–ª—è –∑–±–æ—Ä—É"
        return {
            'readiness_score': readiness_score,
            'recommendation': recommendation,
            'feedback': feedback
        }

    def calculate_harvest_schedule(self, planting_date, variety: str):
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≥—Ä–∞—Ñ—ñ–∫ –∑–±–æ—Ä—É –≤—Ä–æ–∂–∞—é"""
        from datetime import datetime, timedelta
        if isinstance(planting_date, str):
            planting_date = datetime.strptime(planting_date, "%Y-%m-%d")
        characteristics = self.variety_characteristics.get(variety, {})
        days_to_harvest = characteristics.get('days_to_harvest', 65)
        harvest_window = characteristics.get('harvest_window', 5)
        harvest_start = planting_date + timedelta(days=days_to_harvest)
        harvest_end = harvest_start + timedelta(days=harvest_window)
        return {
            'variety': variety,
            'harvest_start': harvest_start.strftime("%Y-%m-%d"),
            'harvest_end': harvest_end.strftime("%Y-%m-%d"),
            'window_days': harvest_window
        }
'''

    def generate_base_code_samples(self) -> List[Dict[str, str]]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –±–∞–∑–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—É"""
        return [
            {
                "instruction": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–≤–æ—Ö —á–∏—Å–µ–ª",
                "input": "Python",
                "output": """def add_numbers(a, b):\n    return a + b"""
            },
            {
                "instruction": "–°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –º–Ω–æ–∂–µ–Ω–Ω—è –¥–≤–æ—Ö —á–∏—Å–µ–ª",
                "input": "Python",
                "output": """def multiply(a, b):\n    return a * b"""
            },
            {
                "instruction": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª—É",
                "input": "",
                "output": """def factorial(n):\n    return 1 if n <= 1 else n * factorial(n-1)"""
            },
            {
                "instruction": "–°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–º —Ä–∞—Ö—É–Ω–∫–æ–º",
                "input": "Python",
                "output": """class BankAccount:\n    def __init__(self, balance=0):\n        self.balance = balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount"""
            },
            {
                "instruction": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É",
                "input": "bubble sort",
                "output": """def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr"""
            },
            {
                "instruction": "–°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º—É",
                "input": "Python",
                "output": """def is_palindrome(text):\n    cleaned = ''.join(text.split()).lower()\n    return cleaned == cleaned[::-1]"""
            }
        ]

    def create_datasets(self, train_ratio: float = 0.8):
        """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –¥–∞—Ç–∞—Å–µ—Ç–∏"""
        samples = self.generate_training_samples()
        random.shuffle(samples)
        split_idx = int(len(samples) * train_ratio)
        train_samples = samples[:split_idx]
        eval_samples = samples[split_idx:]
        train_file = self.output_dir / "train_dataset.jsonl"
        eval_file = self.output_dir / "eval_dataset.jsonl"
        with open(train_file, 'w', encoding='utf-8') as f:
            for s in train_samples:
                f.write(json.dumps(s, ensure_ascii=False) + '\n')
        with open(eval_file, 'w', encoding='utf-8') as f:
            for s in eval_samples:
                f.write(json.dumps(s, ensure_ascii=False) + '\n')
        stats = {
            'total_samples': len(samples),
            'train_samples': len(train_samples),
            'eval_samples': len(eval_samples),
            'train_ratio': train_ratio,
            'categories': self.get_sample_categories(samples)
        }
        with open(self.output_dir / "dataset_stats.json", 'w', encoding='utf-8') as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {self.output_dir}")
        return train_file, eval_file, stats

    def get_sample_categories(self, samples: List[Dict[str, str]]) -> Dict[str, int]:
        """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—Ä–∞–∑–∫—ñ–≤ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"""
        categories: Dict[str, int] = {}
        for sample in samples:
            instruction = sample['instruction'].lower()
            if '—Ñ—É–Ω–∫—Ü—ñ—é' in instruction or 'function' in instruction:
                categories['functions'] = categories.get('functions', 0) + 1
            elif '–∫–ª–∞—Å' in instruction or 'class' in instruction:
                categories['classes'] = categories.get('classes', 0) + 1
            elif '–≥—ñ–¥—Ä–æ–ø–æ–Ω' in instruction or 'hydroponic' in instruction:
                categories['hydroponic'] = categories.get('hydroponic', 0) + 1
            else:
                categories['other'] = categories.get('other', 0) + 1
        return categories

    def validate_datasets(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞—Ç–∞—Å–µ—Ç–∏"""
        train_file = self.output_dir / "train_dataset.jsonl"
        eval_file = self.output_dir / "eval_dataset.jsonl"
        with open(train_file, 'r', encoding='utf-8') as f:
            train_lines = f.readlines()
        with open(eval_file, 'r', encoding='utf-8') as f:
            eval_lines = f.readlines()
        print(f"üìù –¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª: {len(train_lines)} —Ä—è–¥–∫—ñ–≤")
        print(f"üìù –í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª: {len(eval_lines)} —Ä—è–¥–∫—ñ–≤")
        try:
            sample = json.loads(train_lines[0])
            for key in ['instruction', 'input', 'output']:
                if key not in sample:
                    raise ValueError(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á: {key}")
            print("‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –≤–∞–ª—ñ–¥–Ω–∏–π")
        except Exception as exc:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞–Ω–∏—Ö: {exc}")


if __name__ == "__main__":
    processor = HydroponicDataProcessor()
    processor.create_datasets()
    processor.validate_datasets()
